// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: calculator.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/uiyzzi/calculator_demo/backend/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CalculatorName is the fully-qualified name of the Calculator service.
	CalculatorName = "calculator.Calculator"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CalculatorAddProcedure is the fully-qualified name of the Calculator's Add RPC.
	CalculatorAddProcedure = "/calculator.Calculator/Add"
	// CalculatorSubtractProcedure is the fully-qualified name of the Calculator's Subtract RPC.
	CalculatorSubtractProcedure = "/calculator.Calculator/Subtract"
	// CalculatorMultiplyProcedure is the fully-qualified name of the Calculator's Multiply RPC.
	CalculatorMultiplyProcedure = "/calculator.Calculator/Multiply"
	// CalculatorDivideProcedure is the fully-qualified name of the Calculator's Divide RPC.
	CalculatorDivideProcedure = "/calculator.Calculator/Divide"
)

// CalculatorClient is a client for the calculator.Calculator service.
type CalculatorClient interface {
	// 加法运算，传入两个操作数，返回相加结果
	Add(context.Context, *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error)
	// 减法运算，传入两个操作数，返回相减结果
	Subtract(context.Context, *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error)
	// 乘法运算，传入两个操作数，返回相乘结果
	Multiply(context.Context, *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error)
	// 除法运算，传入两个操作数，返回相除结果
	// 如果除数为 0，需要在服务端返回相应错误
	Divide(context.Context, *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error)
}

// NewCalculatorClient constructs a client for the calculator.Calculator service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCalculatorClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CalculatorClient {
	baseURL = strings.TrimRight(baseURL, "/")
	calculatorMethods := gen.File_calculator_proto.Services().ByName("Calculator").Methods()
	return &calculatorClient{
		add: connect.NewClient[gen.OperationRequest, gen.OperationResponse](
			httpClient,
			baseURL+CalculatorAddProcedure,
			connect.WithSchema(calculatorMethods.ByName("Add")),
			connect.WithClientOptions(opts...),
		),
		subtract: connect.NewClient[gen.OperationRequest, gen.OperationResponse](
			httpClient,
			baseURL+CalculatorSubtractProcedure,
			connect.WithSchema(calculatorMethods.ByName("Subtract")),
			connect.WithClientOptions(opts...),
		),
		multiply: connect.NewClient[gen.OperationRequest, gen.OperationResponse](
			httpClient,
			baseURL+CalculatorMultiplyProcedure,
			connect.WithSchema(calculatorMethods.ByName("Multiply")),
			connect.WithClientOptions(opts...),
		),
		divide: connect.NewClient[gen.OperationRequest, gen.OperationResponse](
			httpClient,
			baseURL+CalculatorDivideProcedure,
			connect.WithSchema(calculatorMethods.ByName("Divide")),
			connect.WithClientOptions(opts...),
		),
	}
}

// calculatorClient implements CalculatorClient.
type calculatorClient struct {
	add      *connect.Client[gen.OperationRequest, gen.OperationResponse]
	subtract *connect.Client[gen.OperationRequest, gen.OperationResponse]
	multiply *connect.Client[gen.OperationRequest, gen.OperationResponse]
	divide   *connect.Client[gen.OperationRequest, gen.OperationResponse]
}

// Add calls calculator.Calculator.Add.
func (c *calculatorClient) Add(ctx context.Context, req *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error) {
	return c.add.CallUnary(ctx, req)
}

// Subtract calls calculator.Calculator.Subtract.
func (c *calculatorClient) Subtract(ctx context.Context, req *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error) {
	return c.subtract.CallUnary(ctx, req)
}

// Multiply calls calculator.Calculator.Multiply.
func (c *calculatorClient) Multiply(ctx context.Context, req *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error) {
	return c.multiply.CallUnary(ctx, req)
}

// Divide calls calculator.Calculator.Divide.
func (c *calculatorClient) Divide(ctx context.Context, req *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error) {
	return c.divide.CallUnary(ctx, req)
}

// CalculatorHandler is an implementation of the calculator.Calculator service.
type CalculatorHandler interface {
	// 加法运算，传入两个操作数，返回相加结果
	Add(context.Context, *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error)
	// 减法运算，传入两个操作数，返回相减结果
	Subtract(context.Context, *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error)
	// 乘法运算，传入两个操作数，返回相乘结果
	Multiply(context.Context, *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error)
	// 除法运算，传入两个操作数，返回相除结果
	// 如果除数为 0，需要在服务端返回相应错误
	Divide(context.Context, *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error)
}

// NewCalculatorHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCalculatorHandler(svc CalculatorHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	calculatorMethods := gen.File_calculator_proto.Services().ByName("Calculator").Methods()
	calculatorAddHandler := connect.NewUnaryHandler(
		CalculatorAddProcedure,
		svc.Add,
		connect.WithSchema(calculatorMethods.ByName("Add")),
		connect.WithHandlerOptions(opts...),
	)
	calculatorSubtractHandler := connect.NewUnaryHandler(
		CalculatorSubtractProcedure,
		svc.Subtract,
		connect.WithSchema(calculatorMethods.ByName("Subtract")),
		connect.WithHandlerOptions(opts...),
	)
	calculatorMultiplyHandler := connect.NewUnaryHandler(
		CalculatorMultiplyProcedure,
		svc.Multiply,
		connect.WithSchema(calculatorMethods.ByName("Multiply")),
		connect.WithHandlerOptions(opts...),
	)
	calculatorDivideHandler := connect.NewUnaryHandler(
		CalculatorDivideProcedure,
		svc.Divide,
		connect.WithSchema(calculatorMethods.ByName("Divide")),
		connect.WithHandlerOptions(opts...),
	)
	return "/calculator.Calculator/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CalculatorAddProcedure:
			calculatorAddHandler.ServeHTTP(w, r)
		case CalculatorSubtractProcedure:
			calculatorSubtractHandler.ServeHTTP(w, r)
		case CalculatorMultiplyProcedure:
			calculatorMultiplyHandler.ServeHTTP(w, r)
		case CalculatorDivideProcedure:
			calculatorDivideHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCalculatorHandler returns CodeUnimplemented from all methods.
type UnimplementedCalculatorHandler struct{}

func (UnimplementedCalculatorHandler) Add(context.Context, *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calculator.Calculator.Add is not implemented"))
}

func (UnimplementedCalculatorHandler) Subtract(context.Context, *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calculator.Calculator.Subtract is not implemented"))
}

func (UnimplementedCalculatorHandler) Multiply(context.Context, *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calculator.Calculator.Multiply is not implemented"))
}

func (UnimplementedCalculatorHandler) Divide(context.Context, *connect.Request[gen.OperationRequest]) (*connect.Response[gen.OperationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calculator.Calculator.Divide is not implemented"))
}
