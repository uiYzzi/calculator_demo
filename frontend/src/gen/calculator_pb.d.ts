// @generated by protoc-gen-es v2.2.5
// @generated from file calculator.proto (package calculator, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file calculator.proto.
 */
export declare const file_calculator: GenFile;

/**
 * OperationRequest 定义运算请求消息，包含左右两个操作数
 *
 * @generated from message calculator.OperationRequest
 */
export declare type OperationRequest = Message<"calculator.OperationRequest"> & {
  /**
   * @generated from field: double left = 1;
   */
  left: number;

  /**
   * @generated from field: double right = 2;
   */
  right: number;
};

/**
 * Describes the message calculator.OperationRequest.
 * Use `create(OperationRequestSchema)` to create a new message.
 */
export declare const OperationRequestSchema: GenMessage<OperationRequest>;

/**
 * OperationResponse 定义运算响应消息，包含运算结果
 *
 * @generated from message calculator.OperationResponse
 */
export declare type OperationResponse = Message<"calculator.OperationResponse"> & {
  /**
   * @generated from field: double result = 1;
   */
  result: number;
};

/**
 * Describes the message calculator.OperationResponse.
 * Use `create(OperationResponseSchema)` to create a new message.
 */
export declare const OperationResponseSchema: GenMessage<OperationResponse>;

/**
 * Calculator 服务定义支持加、减、乘、除四则运算
 *
 * @generated from service calculator.Calculator
 */
export declare const Calculator: GenService<{
  /**
   * 加法运算，传入两个操作数，返回相加结果
   *
   * @generated from rpc calculator.Calculator.Add
   */
  add: {
    methodKind: "unary";
    input: typeof OperationRequestSchema;
    output: typeof OperationResponseSchema;
  },
  /**
   * 减法运算，传入两个操作数，返回相减结果
   *
   * @generated from rpc calculator.Calculator.Subtract
   */
  subtract: {
    methodKind: "unary";
    input: typeof OperationRequestSchema;
    output: typeof OperationResponseSchema;
  },
  /**
   * 乘法运算，传入两个操作数，返回相乘结果
   *
   * @generated from rpc calculator.Calculator.Multiply
   */
  multiply: {
    methodKind: "unary";
    input: typeof OperationRequestSchema;
    output: typeof OperationResponseSchema;
  },
  /**
   * 除法运算，传入两个操作数，返回相除结果
   * 如果除数为 0，需要在服务端返回相应错误
   *
   * @generated from rpc calculator.Calculator.Divide
   */
  divide: {
    methodKind: "unary";
    input: typeof OperationRequestSchema;
    output: typeof OperationResponseSchema;
  },
}>;

